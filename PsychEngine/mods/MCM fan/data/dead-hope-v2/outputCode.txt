package;

import sys.Date;
import sys.vm.Alarm;

class Main {

    //varibles
    public static var X:Int = 300;
    public static var Y:Int = 200;
    public static var songPos:Float = getSongPosition();
    public static var curBpm:Float = 120; // Default BPM value for simulation
    public static var currentBeat:Float = (songPos / 5000) * (curBpm / 60);
    public static var randomPlayerstrumY1:Float = 0;
    public static var randomPlayerstrumY2:Float = 0;
    public static var randomPlayerstrumY3:Float = 0;
    public static var randomPlayerstrumY4:Float = 0;
    public static var randomPlayerstrumY5:Float = 0;
    public static var randomPlayerstrumY6:Float = 0;
    public static var randomPlayerstrumY7:Float = 0;
    public static var randomPlayerstrumY8:Float = 0;
    public static var randomPlayerstrumX1:Float = 0;
    public static var randomPlayerstrumX2:Float = 0;
    public static var randomPlayerstrumX3:Float = 0;
    public static var randomPlayerstrumX4:Float = 0;
    public static var randomPlayerstrumX5:Float = 0;
    public static var randomPlayerstrumX6:Float = 0;
    public static var randomPlayerstrumX7:Float = 0;
    public static var randomPlayerstrumX8:Float = 0;
    public static var randomPlayerstrumY9:Float = 0;
    public static var randomPlayerstrumY10:Float = 0;
    public static var randomPlayerstrumY11:Float = 0;
    public static var randomPlayerstrumY12:Float = 0;
    public static var randomPlayerstrumY13:Float = 0;
    public static var randomPlayerstrumY14:Float = 0;
    public static var streeep:Float = 0;

    // Additional global variables to simulate environment
    public static var middlescroll:Bool = true;
    public static var wasMidscrollOn:Bool = false;
    public static var misses:Int = 0;
    public static var speed:Float = 1.0;
    public static var defaultPlayerStrumX0:Float = 100;
    public static var defaultPlayerStrumX1:Float = 200;
    public static var defaultPlayerStrumX2:Float = 300;
    public static var defaultPlayerStrumX3:Float = 400;
    public static var defaultPlayerStrumY0:Float = 100;
    public static var defaultPlayerStrumY1:Float = 200;
    public static var defaultPlayerStrumY2:Float = 300;
    public static var defaultPlayerStrumY3:Float = 400;
    public static var randomscrollspeed:Float = 1.5;

    public static function main() {
        // For simulation, we call some functions manually.
        onCreate();
        onSongStart();
        // Simulating update loop call; in real scenario, this would be called each frame with elapsed time.
        onUpdate(0.016);
        // Simulate a note miss
        noteMiss(0, 0, "", false);
        // Simulate end of song and destroy events
        onDestroy();
        onEndSong();
    }

    public static function onCreate():Void {
        if (middlescroll == true) {
            setPropertyFromClass("ClientPrefs", "middleScroll", false);
            wasMidscrollOn = true;
        }
    }

    public static function onSongStart():Void {
        setPropertyFromClass("openfl.Lib", "application.window.title", "Survive or else...");
        debugPrint("Application title change sucessful!");
        setPropertyFromClass("openfl.Lib", "application.window.x", 300);
        setPropertyFromClass("openfl.Lib", "application.window.y", 200);
        debugPrint("Application window sucessfully moved!");
        setPropertyFromGroup("playerStrums", 4, "x", defaultPlayerStrumX0 - 320);
        setPropertyFromGroup("playerStrums", 5, "x", defaultPlayerStrumX1 - 320);
        setPropertyFromGroup("playerStrums", 6, "x", defaultPlayerStrumX2 - 320);
        setPropertyFromGroup("playerStrums", 7, "x", defaultPlayerStrumX3 - 320);
    }

    public static function onUpdate(elapsed:Float):Void {
        // Seeds the function math.random
        mathRandomSeed(osTime());
        var Decider:Int = randomInt(1, 100); // Decider if the noteTweenX and noteTweenY and application window change
        if (Decider < 50) { // checker
            if (Decider < 2) { // checker
                Decider = randomInt(1, 100); // Decider if the noteTweenX and noteTweenY and application window change
            }
            Decider = randomInt(1, 100); // Decider if the noteTweenX and noteTweenY and application window change
        }
        if (Decider > 50) { // checker
            randomPlayerstrumY1 = Std.random(101);
            randomPlayerstrumY2 = Std.random(101);
            randomPlayerstrumY3 = Std.random(101);
            randomPlayerstrumY4 = Std.random(101);
            randomPlayerstrumY5 = 0.2; // static var
            randomPlayerstrumY6 = 0.2; // static var
            randomPlayerstrumY7 = 0.2; // static var
            randomPlayerstrumY8 = 0.2; // static var
            randomPlayerstrumX1 = Std.random(101);
            randomPlayerstrumX2 = Std.random(101);
            randomPlayerstrumX3 = Std.random(101);
            randomPlayerstrumX4 = Std.random(101);
            randomPlayerstrumX5 = 0.2; // static var
            randomPlayerstrumX6 = 0.2; // static var
            randomPlayerstrumX7 = 0.2; // static var
            randomPlayerstrumX8 = 0.2; // static var
            Decider = randomInt(1, 100); // Decider if the noteTweenX and noteTweenY and application window change
        }
        if (Decider == 50) { // checker
            Decider = randomInt(1, 100); // Decider if the noteTweenX and noteTweenY and application window change
        }
        songPos = getSongPosition();
        currentBeat = (songPos / 5000) * (curBpm / 60);
        //Note Tween Crap
        noteTweenY("defaultPlayerStrumY0", 4, defaultPlayerStrumY0 - randomPlayerstrumY1 * Math.sin((currentBeat + 4 * 0.25) * Math.PI), randomPlayerstrumY5);
        noteTweenY("defaultPlayerStrumY1", 5, defaultPlayerStrumY1 - randomPlayerstrumY2 * Math.sin((currentBeat + 5 * 0.25) * Math.PI), randomPlayerstrumY6);
        noteTweenY("defaultPlayerStrumY2", 6, defaultPlayerStrumY2 - randomPlayerstrumY3 * Math.sin((currentBeat + 6 * 0.25) * Math.PI), randomPlayerstrumY7);
        noteTweenY("defaultPlayerStrumY3", 7, defaultPlayerStrumY3 - randomPlayerstrumY4 * Math.sin((currentBeat + 7 * 0.25) * Math.PI), randomPlayerstrumY8);
        noteTweenX("defaultPlayerStrumX0", 4, defaultPlayerStrumX0 - 320 - randomPlayerstrumX1 * Math.sin((currentBeat + 4 * 0.25) * Math.PI), randomPlayerstrumX5);
        noteTweenX("defaultPlayerStrumX1", 5, defaultPlayerStrumX1 - 320 - randomPlayerstrumX2 * Math.sin((currentBeat + 5 * 0.25) * Math.PI), randomPlayerstrumX6);
        noteTweenX("defaultPlayerStrumX2", 6, defaultPlayerStrumX2 - 320 - randomPlayerstrumX3 * Math.sin((currentBeat + 6 * 0.25) * Math.PI), randomPlayerstrumX7);
        noteTweenX("defaultPlayerStrumX3", 7, defaultPlayerStrumX3 - 320 - randomPlayerstrumX4 * Math.sin((currentBeat + 7 * 0.25) * Math.PI), randomPlayerstrumX8);

        noteTweenY("defaultOppStrumY0", 0, defaultPlayerStrumY0 - randomPlayerstrumY1 * Math.sin((currentBeat + 4 * 0.25) * Math.PI), randomPlayerstrumY5);
        noteTweenY("defaultoppStrumY1", 1, defaultPlayerStrumY1 - randomPlayerstrumY2 * Math.sin((currentBeat + 5 * 0.25) * Math.PI), randomPlayerstrumY6);
        noteTweenY("defaultoppStrumY2", 2, defaultPlayerStrumY2 - randomPlayerstrumY3 * Math.sin((currentBeat + 6 * 0.25) * Math.PI), randomPlayerstrumY7);
        noteTweenY("defaultoppStrumY3", 3, defaultPlayerStrumY3 - randomPlayerstrumY4 * Math.sin((currentBeat + 7 * 0.25) * Math.PI), randomPlayerstrumY8);
        noteTweenX("defaultoppStrumX0", 0, defaultPlayerStrumX0 - 320 - randomPlayerstrumX1 * Math.sin((currentBeat + 4 * 0.25) * Math.PI), randomPlayerstrumX5);
        noteTweenX("defaultoppStrumX1", 1, defaultPlayerStrumX1 - 320 - randomPlayerstrumX2 * Math.sin((currentBeat + 5 * 0.25) * Math.PI), randomPlayerstrumX6);
        noteTweenX("defaultoppStrumX2", 2, defaultPlayerStrumX2 - 320 - randomPlayerstrumX3 * Math.sin((currentBeat + 6 * 0.25) * Math.PI), randomPlayerstrumX7);
        noteTweenX("defaultoppStrumX3", 3, defaultPlayerStrumX3 - 320 - randomPlayerstrumX4 * Math.sin((currentBeat + 7 * 0.25) * Math.PI), randomPlayerstrumX8);
        //end of Note Tween Crap
        if ((songPos / 5000) * (curBpm / 60) == 20) {
            debugPrint("Hard part coming up!"); // prints "Hard part coming up!"
        }
        getMisses(); // gets the current amount of misses the player has
        if (misses == 1) { // miss checker
            setPropertyFromClass("openfl.Lib", "application.window.title", "DON'T MESS UP ANYMORE!!!"); // changes app. name 
            debugPrint("Application title change sucessful!"); // prints "Application title change sucessful!"
        }
        if (misses == 25) { // miss checker
            setPropertyFromClass("openfl.Lib", "application.window.title", "DON'T FUCK UP!!!"); // changes app. name 
            debugPrint("Application title change sucessful!"); // prints "Application title change sucessful!"
        }
        if (misses == 50) { // miss checker
            setPropertyFromClass("openfl.Lib", "application.window.title", "YOU WON'T MAKE IT!"); // changes app. name 
            debugPrint("Application title change sucessful!"); // prints "Application title change sucessful!"
        }
        if (misses == 75) { // miss checker
            setPropertyFromClass("openfl.Lib", "application.window.title", "YOU ARE SO DEAD!!!!!!"); // changes app. name 
            debugPrint("Application title change sucessful!"); // prints "Application title change sucessful!"
        }
        if (misses == 100) { // miss checker
            setPropertyFromClass("openfl.Lib", "application.window.title", "YOUR COMPUTER IS OURS!!!!"); // changes app. name 
            debugPrint("Application title change sucessful!"); // prints "Application title change sucessful!"
        }
    }

    public static function noteMiss(id:Int, direction:Int, noteType:String, isSustainNote:Bool):Void {
        // note miss checker
        debugPrint("YOU MISSED NOOB!");
        noteTweenY("defaultPlayerStrumY0", 4, defaultPlayerStrumY0 - randomPlayerstrumY1 * Math.sin((currentBeat + 4 * 0.25) * Math.PI), randomPlayerstrumY5);
        noteTweenY("defaultPlayerStrumY1", 5, defaultPlayerStrumY1 - randomPlayerstrumY2 * Math.sin((currentBeat + 5 * 0.25) * Math.PI), randomPlayerstrumY6);
        noteTweenY("defaultPlayerStrumY2", 6, defaultPlayerStrumY2 - randomPlayerstrumY3 * Math.sin((currentBeat + 6 * 0.25) * Math.PI), randomPlayerstrumY7);
        noteTweenY("defaultPlayerStrumY3", 7, defaultPlayerStrumY3 - randomPlayerstrumY4 * Math.sin((currentBeat + 7 * 0.25) * Math.PI), randomPlayerstrumY8);
        noteTweenX("defaultPlayerStrumX0", 4, defaultPlayerStrumX0 - 320 - randomPlayerstrumX1 * Math.sin((currentBeat + 4 * 0.25) * Math.PI), randomPlayerstrumX5);
        noteTweenX("defaultPlayerStrumX1", 5, defaultPlayerStrumX1 - 320 - randomPlayerstrumX2 * Math.sin((currentBeat + 5 * 0.25) * Math.PI), randomPlayerstrumX6);
        noteTweenX("defaultPlayerStrumX2", 6, defaultPlayerStrumX2 - 320 - randomPlayerstrumX3 * Math.sin((currentBeat + 6 * 0.25) * Math.PI), randomPlayerstrumX7);
        noteTweenX("defaultPlayerStrumX3", 7, defaultPlayerStrumX3 - 320 - randomPlayerstrumX4 * Math.sin((currentBeat + 7 * 0.25) * Math.PI), randomPlayerstrumX8);

        speed = Std.parseFloat("E");
        randomscrollspeed = (Std.random(350) / 100.0) + 1.5; // random float between 1.5 and 5 approximately
        setProperty("scrollspeed", speed);
        setPropertyFromGroup("scrollspeed", 0, randomscrollspeed);
    }

    public static function onDestroy():Void {
        //exit to menu checker
        setPropertyFromClass("openfl.Lib", "application.window.title", "Naki's FNF Charts");
        debugPrint("Application window sucessfully moved!");
        if (wasMidscrollOn == true) {
            setPropertyFromClass("ClientPrefs", "middleScroll", true);
        }
    }

    public static function onEndSong():Void {
        if (wasMidscrollOn == true) {
            setPropertyFromClass("ClientPrefs", "middleScroll", true);
        }
    }

    // Helper functions to simulate external functions from the Lua environment

    public static function getSongPosition():Float {
        // Returns the current song position in milliseconds.
        return Date.now().getTime() % 5000; // Dummy simulation
    }

    public static function noteTweenY(tag:String, index:Int, value:Float, duration:Float):Void {
        // Simulated tween function for Y
        debugPrint("TweenY - " + tag + " Index: " + index + " Value: " + value + " Duration: " + duration);
    }

    public static function noteTweenX(tag:String, index:Int, value:Float, duration:Float):Void {
        // Simulated tween function for X
        debugPrint("TweenX - " + tag + " Index: " + index + " Value: " + value + " Duration: " + duration);
    }

    public static function setPropertyFromClass(className:String, property:String, value:Dynamic):Void {
        // Simulated function to set a property on a class
        debugPrint("Set property from class - " + className + " Property: " + property + " Value: " + value);
    }

    public static function setPropertyFromGroup(group:String, index:Int, property:String, value:Dynamic):Void {
        // Simulated function to set a property on a group element
        debugPrint("Set property from group - " + group + " Index: " + index + " Property: " + property + " Value: " + value);
    }

    public static function setProperty(property:String, value:Dynamic):Void {
        // Simulated function to set a property
        debugPrint("Set property - " + property + " Value: " + value);
    }

    public static function debugPrint(message:String):Void {
        trace(message);
    }

    public static function getMisses():Int {
        // Simulated function returning the amount of misses.
        return misses;
    }

    // Function to generate a random integer between min and max (inclusive)
    public static function randomInt(min:Int, max:Int):Int {
        return Std.random(max - min + 1) + min;
    }

    // Function to simulate math.randomseed (not used in Haxe but provided for compatibility)
    public static function mathRandomSeed(seed:Float):Void {
        // Haxe's Math.random is automatically seeded; this is a dummy function.
    }

    // Function to simulate os.time()
    public static function osTime():Float {
        return Date.now().getTime();
    }
}
  
